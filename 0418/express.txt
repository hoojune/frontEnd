익스프레스모듈
http모듈만 사용해서 웹서버를 구성하면 직접많은기능을 개발해야한다
이 문제를 해결하기 위해 만들어진 모듈이 익스프레스다.
익스프레스 모듈을 사용하면 간단한 코드로 웹서버의 기능을 대부분구현가능하고
미들웨어와 라우터를 사용하여 편리하게 웹서버를 구성할 수있다.

package설치하기
npm install모듈명(npm i 모듈명)
npm i express

초반 기본형식
const express = require('express');
const app = express();
const port = 3000;

메서드
use() : 미들웨어 함수를 사용합니다.
get() : get으로 사용자 정보를 전달 받습니다. -> / 사용
set() : 서버설정을 위한 속성을 설정합니다.
redirect() : 웹페이지의 경로를 강제로 이동시킵니다.
send() : 클라이언트에 응답 데이터를 보냅니다.
전달할 수 있는 데이터는 html,buffer,json,json배열..등입니다.
header() : 헤더를 확인합니다

node.js
const userid = req.query.userid;

query : 클라이언트에서 get방식으로 전송한 요청파라미터를 확인합니다.
body : 클라이언트에서 post방식으로 전송한 파라미터를 확인합니다.
post방식을 통한 요청 파라미터를 확인하려면 body-parser와 같은 모듈을 사용해야합니다

{Nodemon} = 라이브서버 ->전역으로 사용가능
서버코드를 변경할때마다 서버를 재시작하도록 하는 모듈
npm install -g nodemon (프로젝트기준)

->json파일에서 script밑에 test가 시작파일을 설정하는부분
    test -> start로 바꿔주고
    내용을 -> "nodemon 시작하는 파일"

REST란?
"Representalional state Transfer"의 약자
자원을 이름으로 구분하여 해당자원의 상태를 주고받는것을 의미합니다

CRUD연산
Crate : 생성(Post)
Read :  조회(Get)
Update : 수정(Put)
Delete : 삭제(Delete)

Router 미들웨어
사용자의 다양한 요청이 들어왔을때 use()메서드로 설정한 미들웨어가 항상 호출되는
불편한 점이 있다.
이를 해결하고자 사용하는 미들웨어가 Router미들웨어이다.

라우터란?
라우터는 클라이언트의 요청 경로(path)를 보고 이 요청을 처리할 수 있는 곳으로 기능을 전달해주는 역할을 한다. 
이러한 역할을 라우팅이라고 하는데, 애플리케이션 엔드 포인트 (URI)의 정의, 그리고 URI가 클라이언트 요청에 응답하는 방식을 의미한다.
 예를 들어, 클라이언트가 /users 경로로 요청을 보낸다면 이에 대한 응답 처리를 하는 함수를 별도로 분리해서 만든 다음 get()메소드를 호출하여 
 라우터로 등록할 수 있다.

라우터 사용하기 
익스프레스에선 이러한 라우터를 미들웨어로서 제공하고 있다. 다음과 같은 순서로 라우터 미들웨어를 사용할 수 있다.
1. 라우터 객체 참조
2. 라우팅 함수 등록
3. 라우터 객체를 app 객체에 등록


Router 객체 만들기
cosnt 라우터객체명 = express.Router(); -> 경로

라우터객체.route(요청패스).get(실행할 함수);
라우터객체.route(요청패스).post(실행할 함수);

익스프레스에 Router객체 적용
app.use('/',라우터객체);

탬플릿엔진
-View를 구현하기 위한 템플릿

html css +  php asp java -> 웹개발

MVC
Model : dataBase
View : html
controller : logic,제어
MVC   -> Model    ->   view     -> controller

백엔드 ->오라클, 마이크로스프트 db -> 스트링부트 -> 자바
프론트엔드 -> mongodb -> 리액트 -> 노드js 

EJS(Embedded javaScript)모듈
EJS모듈은 템플릿 엔진모듈입니다
템플릿 엔진모듈은 특정한 형식인 파일로부터 html페이지를 생성하는 모듈입니다.

설치 npm i ejs

EJS파일 형식의 특수코드
<% ~~~ code ~~~~%> : 자바스크립트 코드를 입력하는 영역입니다.
<%=변수 또는 값%> : 데이터를 출력합니다
<%-변수 또는 객체%> : ejs파일 전체를 전달합니다.

EJS데이터를 전달
render() : 메서드의 매개변수에 전달하고자 하는 데이터를
입력하여 전달함

파일저장시 확장자를 ejs로 하면 !시 html형식 그대로 생성됨

Express란?

Express는 웹 및 모바일 애플리케이션을 위한 일련의 강력한 기능을 제공하는 간결하고 유연한 Node.js 웹 애플리케이션 프레임워크이다.
 사실상 Nodejs의 표준 웹서버 프레임워크로 불려질 만큼 많은 곳에서 사용하고 있다. 그렇다면 Node.js와 Express는 무슨 관계인가? 
이전 글에서 Node.js는 Chrome의 V8엔진을 이용하여 javascript로 브라우저가 아니라 서버를 구축하고,
 서버에서 JavaScript가 작동되도록 해주는 런타임 환경(플랫폼)이라고 했다. Express는 이런 Nodejs의 원칙과 방법을 이용하여
  웹애플리케이션을 만들기 위한 프레임워크이다.


왜 Express 를 사용해야 하지?

Express는 프레임워크이므로 웹 애플리케이션을 만들기 위한 각종 라이브러리와 미들웨어 등이 내장돼 있어 개발하기 편하고, 
수많은 개발자들에게 개발 규칙을 강제하여 코드 및 구조의 통일성을 향상시킬 수 있다. 그것이 바로 프레임워크 도입의 가장 큰 장점이다.
가장 많은 곳에서 보편적으로 사용되기 때문에 Express를 도입하면 구글링을 통해 충분한 레퍼런스들을 검색할 수 있다.
다만, Express 외에도 수 많은 Nodejs 웹서버 프레임워크가 존재한다. 여기를 가보면 대표적인 웹프레임워크들을 소개해두었는데,
 Express 개발팀에서 만든 Koa가 차세대 프레임워크가 될 것 같다고 한다.