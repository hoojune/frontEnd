Node.js != javascript

백엔드개발자가 사용하는언어
노드란 자바스크립트가 실행될수 있는 환경,런타임
google v8 javascript엔진을 사용하여 코드를 실행하고 기본모듈이 자바스크립트로 사용됨
NPM이라는 패키지관리자가 포함되어 있다.NPM은 node.js의 프로그램을 설치하고 관리하는데 사용함
node.js에는 웹서버(apache,tomcat,iis , zeus .. )과 같은 스포트웨어가 필요없이 웹서버역할을
할수 있는 내장라이브러리가 있다.

노드를 쓰는이유
어플리케이션개발 = 클라이언트 프로그램과 서버프로그램을 모두 개발해야 완성이 된다.
-> 노드는 자바스크립트이며 노드를 사용하면 클라이언트-서버프로그래밍이 다가능해진다.

리엑트는 화면에 보여주는 Vue엔진이다.

node.js버전확인
cmd창에서 node -v

npm버전확인
cmd창에서 npm -v 명령어로 확인


노드 서버설정
npm init  ->옵션을 직접 제공 -> 폴더 실행마다 서버폴더로 설정함

package.json ->자바스크립트의 모듈을 관리하는 설정파일

노드실행 -> 서버에 요청을 했다.
node 파일이름.js

(서버에 응답)
웹브라우저에서 해당되는 주소 127.0.0.1:해당포트입력하여 실행

노드실행중지
ctrl + c

port는 서버의 각각의 실행되는 기능별로 실행되는 경로
서버는 클라이언트에게 다양한 기능을 제공하는 pc

서버는 다양한 기능들을 가지고 있고 그기능들을 제공하는 pc 
pc의 기능들을 찾아서 실행하는 경로를 port라고 한다.리액트는 기본3000포트 
클라이언트에서 서버에 접근해서 프로그램을 실행하고 싶을떄 
그 프로그램의 주소가 port이다 즉 앱의 주소이다.
각각의 프로그램,앱마다 port명을 따로 지정해줌

예외처리(Exception)
프로그램이 실행되고 있는 런타임시에 에러가 발생할 경우 처리할 수 있는 프로그램 구간을 의미합니다
try{
    예외상황이 발생할 수 있는 문장(e)
}catch(e){
    예외상황이 발생했을 경우 처리할 문장
} finally{
    예외 상황이 발생하거나 발생하지 않아도 무조건 실행될 문장(생략가능)
}

(events)이벤트모듈
이벤트위주의 프로그램을 작성할 때 사용하는 모듈입니다.

메서드
on() : 지정한 이벤트의 리스너를 추가합니다.
once() : 지정한 이벤트의 리스너를 추가하지만 한번 실행이후 자동제거됩니다.
removelistener() : 지정한 이벤트에 대한 리스너를 제거합니다.
emit() : 지정한 이벤트를 발생시킵니다.

시스템이벤트
process객체는 노드에서 항상 사용할 수 있는객체입니다
on() 과 emit()메서드는 객체를 생성하거나 모듈을 가져오지 않아도 바로사용가능하다.
on()메서드를 호출하면서 이벤트 이름을  exit로 지정하면 내부적으로 프로세스가
    끝날 때를 알 수 있다.

--> FileSystem모듈(fs)
->파일 처리관련 모듈 ->가장 중요하고 기초되는 모듈
메서드
readFile() :파일을 비동기적으로 읽습니다. 
readFileSync() : 파일을 동기적으로 읽습니다.
writeFile() : 파일을 비동기적으로 씁니다
writeFileSync() : 파일을 동기적으로 씁니다.

--> http 모듈
node.js에서 가장 기본적이고 중요한 서버모듈입니다
HTTp 웹 서버를 생성하는것과 관련된 모든 기능을 담당합니다

1.server객체
http모듈의 createServer()메서드를 사용하여 server객체를 생성한다.
메서드
listen() : 서버를 실행하고 클라이언트를 기다립니다
close() : 서버를 종료합니다

이벤트
request : 클라이언트가 서버에 요청할 때 발생하는 이벤트입니다.
connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
close : 서버가 종료될때 발생하는 이벤트입니다 

2. request 객체
클라이언트가 서버에게 전달하는 메세지(정보)를 담는 객체입니다

속성
method : 클라이언트 요청방식을 나타냅니다.(GET, Post)
url : 클라이언트가 요청한 URl을 나타냅니다.


3.respose객체
서버에서 클라이언트로 응답 메세지를 전송시켜주는 객체입니다
어떻게 답을 보여줄지
메서드 
writeHead() : 응답 해더를 작성합니다
end() : 응답본문을 작성합니다.

MIME 형식
text/plain : 일반적인 text파일
text/html : html형식파일
text/css : css 형식 파일
text/xml : xml 형식 파일
image/jpeg : jpeg 이미지 파일
image/png : png 이미지 파일
video/mpeg : mpeg 동영상파일
audio/mp3 : mp3음악 파일

익스프레스(express)모듈
http모듈만 사용해서 웹서버를 구성하면 직접많은 기능을 개발해야합니다.
이문제를 해결하기 위해 만들어진 모듈이 익스프레스입니다.
익스프레스 모듈을 사용하면 간단한 코드로 웹서버의 기능을 대부분 구현가능하고
미들웨어와 라우터를 사용하여 편리하게 웹서버를 구성할수 있습니다

메서드
use() : 미들웨어 함수를 사용합니다.
get() : get으로 사용자 정보를 전달 받습니다.
set() : 서버설정을 위한 속성을 설정합니다.
redirect() : 웹페이지의 경로를 강제로 이동시킵니다.
send() : 클라이언트에 응답 데이터를 보냅니다.전달할 수 있는 데이터는 html,buffer,json,json배열..등입니다.
header() : 헤더를 확인합니다

package 설치하기
npm install모듈명(npm  i 모듈명)
npm i express

다른폴더에서 작업시 json패키지만 해당 폴더로 옮긴뒤 
터미널에서  npm install 입력하면 기초 패키지 모듈이 복원됨


미들웨어 함수는 req(요청) 객체, res(응답) 객체, 그리고 어플리케이션 요청-응답 사이클 도중 
그 다음의 미들웨어 함수에 대한 엑세스 권한을 갖는 함수이다.

미들웨어란 간단하게 말하면 클라이언트에게 요청이 오고 그 요청을 보내기 위해 응답하려는 중간(미들)에 목적에 맞게 처리를 하는, 
말하자면 거쳐가는 함수들이라고 보면 되겠다.

예를 들어서 요청-응답 도중에 시간을 콘솔 창에 남기고 싶으면 미들웨어 함수를 중간에 넣어서 
표시를 한 뒤에 계속해서 다음 미들웨어들을 처리할 수 있도록 하는 것이다.

다음 미들웨어 함수에 대한 엑세스는 next 함수를 이용해서 다음 미들웨어로 현재 요청을 넘길 수 있다.
next라는 말에서 알 수 있듯이 next를 통해 미들웨어는 순차적으로 처리된다.

app.use 안에 있는 모든 함수들은 모두 미들웨어이며 요청이 올때마다 이 미들웨어를 거치며 클라이언트에게 응답하게 된다.
이 미들웨어들을 어떨 때 사용하면 편리하냐면 페이지를 렌더링할 때 사용자 인증을 앞서 거친 후에 렌더링하고 싶을 때 
사용자 인증 미들웨어를 작성하고 앞에 삽입하게 되면 편리하다.

혹은 로그를 먼저 남기고 싶을때도 로그를 남기는 미들웨어를 작성하고 앞서 삽입하면 편리하다.


미들웨어의 특징을 간략히 정리하자면 다음과 같다.

모든 코드를 실행
다음 미들웨어 호출(미들웨어가 순차적으로 실행)
res, req 객체 변경 가능
요청-응답 주기를 종료(response methods를 이용)

